<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>bundleUUID</key>
	<string>5A9D4FC6-6CBE-11D9-A21B-000D93589AF6</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby -rjcode -KU

# Modified version of the bundled "Paste Line/Selection Online…" command.
#
# Modifications by Henrik Nyh &lt;http://henrik.nyh.se&gt; 2007-07-10.
#
# Just presents a dialog to select public or private and always copies to
# clipboard + Growls when done, or whatever you configure.

BUNDLE_SUPPORT = ENV['TM_BUNDLE_SUPPORT'] 
SUPPORT_PATH   = ENV['TM_SUPPORT_PATH']

PASTE_URL = 'http://pastie.textmate.org/pastes'
# Options: "Send to Clipboard", "Open in Browser" and whatever else the original command supports – and "Growl".
# "Growl" action assumes you have Growl with growlnotify: http://growl.info/documentation/growlnotify.php
ACTIONS   = ["Send to Clipboard", "Growl"]
MESSAGE   = "The URL will be copied to clipboard."

require "#{BUNDLE_SUPPORT}/lib/doctohtml.rb"
%w&lt;textmate progress escape ui&gt;.each { |lib| require "#{SUPPORT_PATH}/lib/#{lib}" }
%w&lt;cgi fileutils zlib&gt;.each { |lib| require lib }

# We actually don't use the URL, but feel free to.
def growl(url)
  what = ENV.has_key?('TM_SELECTED_TEXT') ? "Selection" : "Document"
  `growlnotify -t "Pasted #{what} Online" -m "The pastie URL is in your clipboard." --appIcon "TextMate"`
  # --appIcon "Grab" and --icon "textClipping" are nice alternative icons.
end

def temp_script(script)
  dest = %x{ /usr/bin/mktemp -t tm_paste }.chomp
  at_exit { File.delete dest }
  FileUtils.cp(script, dest)
  dest
end

def get_privacy
  what = ENV['TM_SELECTED_TEXT'] ? 'selected text' : 'document contents'
  button = TextMate::UI.alert(
    :informational,
    "You're about to pastie the #{what}.",
    "#{MESSAGE} Please specify the paste privacy level.",
    "Private", "Cancel", "Public"
  )
  %w&lt;Public Private&gt;.index(button) || exit
end

def find_language_ext
	bundle_dirs = [
		File.expand_path('~/Library/Application Support/TextMate/Bundles'),
		'/Library/Application Support/TextMate/Bundles',
		TextMate.app_path + '/Contents/SharedSupport/Bundles'
	]

  if scope = ENV['TM_SCOPE'] then
    scope = scope.split(' ').first
    bundle_dirs.each do |dir|
      Dir.glob(dir + '/*.tmbundle/Syntaxes/*.{plist,tmLanguage}') do |filename|
        File.open(filename) do |io|
          begin
            plist = OSX::PropertyList.load(io)
            if scope == plist['scopeName'].to_s then
              return Array(plist['fileTypes']).first || 'txt'
            end
          rescue Exception =&gt; e
            abort "Error while parsing “#{filename}”\n\n#{e}"
          end
        end
      end
    end
  end

  ext = File.extname(ENV['TM_FILENAME'].to_s).sub(/\A\./, '')
  ext.empty? ? 'txt' : ext
end

def paste_stdin(priv)
  wrap = (ENV['TM_SCOPE'] =~ /^text\./) ? 1 : 0

  server = $1 if PASTE_URL =~ %r{.*?://(.*?)(/.*)?$}
  TextMate.call_with_progress(:title =&gt; 'Paste to Pastie', :message =&gt; "Contacting server “#{server}”…") do
    text_file, html_file = `/usr/bin/mktemp -t tm_paste &amp;&amp; /usr/bin/mktemp -t tm_paste`.split("\n")
    at_exit { File.delete(text_file); File.delete(html_file) }

    xml = STDIN.read

    open(text_file, 'w') do |io|
      io &lt;&lt; CGI::unescapeHTML(xml.gsub(/&lt;[^&gt;]*&gt;/, ''))
    end

    Zlib::GzipWriter.open(html_file) do |gz|
      gz.write document_to_html(xml)
    end

    author = ENV['TM_AUTHOR'] || "#{`dscl . read "/Users/$USER" realname|cut -f2 -d:`.strip} (#{ENV['USER']})"
    ext = find_language_ext

    %x{
      curl #{PASTE_URL} \
      -s -L -o /dev/null -w "%{url_effective}" \
      -H "Expect:" \
      -F "paste[parser]=plaintext" \
      -F "paste[restricted]=#{priv}" \
      -F "paste[wrap]=#{wrap}" \
      -F "paste[display_name]=#{author}" \
      -F "paste[file_extension]=#{ext}" \
      -F "paste[body]=&lt;#{text_file}" \
      -F "paste[textmate_html_gz]=&lt;#{html_file}"
    }
  end
end

pid = fork do
  priv = get_privacy
  url = paste_stdin(priv)
  if url == PASTE_URL  # pastie error--something went wrong
    puts "Server error: Your paste could not be made at this time. " +
         "Please wait a moment and try again."
  else
    growl = ACTIONS.delete("Growl")
    %x{ osascript #{e_sh temp_script(BUNDLE_SUPPORT + "/paste_to_destinations.scpt")} #{e_sh url} #{e_sh ACTIONS.join("\n")} }
    if growl
      growl(url)
    else
      puts "Pasted #{url}."
    end
  end
end

Process.detach(pid)
</string>
	<key>fallbackInput</key>
	<string>document</string>
	<key>input</key>
	<string>selection</string>
	<key>inputFormat</key>
	<string>xml</string>
	<key>keyEquivalent</key>
	<string>^~V</string>
	<key>name</key>
	<string>Paste Document / Selection Online…</string>
	<key>output</key>
	<string>showAsTooltip</string>
	<key>uuid</key>
	<string>6E779E48-F146-49BF-B60C-EFDFD1380772</string>
</dict>
</plist>
